@page "/card-files"
@using OpenCMS.Shared.Common
@using SelectEventArgs = Syncfusion.Blazor.Navigations.SelectEventArgs
@using MudBlazor
@inject ICardFilesService _cardFilesService
@inject IDialogService _dialogService
<ContentWrapper CurrentPage="Card Files">
    <div class="card">

        <div class="card-body">
            <SfTab CssClass="BlazorTab" LoadOn="ContentLoad.Init">
                <TabEvents Selected="OnTabSelectedChange"></TabEvents>
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Customer"></TabHeader>
                        </ChildContent>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Vendor"></TabHeader>
                        </ChildContent>
                    </TabItem>
                </TabItems>
            </SfTab>
            <SfGrid DataSource="dataSource" AllowPaging="true" AllowFiltering="true">
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                <GridPageSettings PageSizes="true" PageSize="10"></GridPageSettings>
                <GridColumns>
                    <GridColumn HeaderText="Manage Records" Width="150">
                        <HeaderTemplate>
                            <SfButton IsPrimary="true" IconCss="fas fa-plus-square" OnClick="@(() => ShowAddEditDialog(new CardFilesModel()))"></SfButton>
                        </HeaderTemplate>
                        <Template>
                            <SfButton OnClick="@(() => ShowAddEditDialog(context as CardFilesModel))" IconCss="fas fa-edit"></SfButton>
                            <SfButton OnClick="@(() => DeleteItem(context as CardFilesModel))" IconCss="fas fa-trash"></SfButton>
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@nameof(CardFilesModel.FullName)"></GridColumn>
                    <GridColumn Field="@nameof(CardFilesModel.PhoneNumber)"></GridColumn>
                    <GridColumn Field="@nameof(CardFilesModel.Email)"></GridColumn>
                    <GridColumn Field="@nameof(CardFilesModel.AddressLine1)"></GridColumn>
                    <GridColumn Field="@nameof(CardFilesModel.AddressLine2)" Format="n2"></GridColumn>
                </GridColumns>
                
                <SfSpinner Size="40" Type="SpinnerType.Bootstrap"  Visible="@isLoading"></SfSpinner>
            </SfGrid>
        </div>
    </div>
    <AddEditCardFileComponent ShowDialog="_showDialog" Model="_cardFilesModel" OnSave="OnSave" OnClose="OnClose"></AddEditCardFileComponent>
</ContentWrapper>
@code{
    private bool _showDialog = false;
    private CardFilesModel _cardFilesModel = new();
    private List<CardFilesModel> dataSource = new();
    private CardFileType _cardFileType;
    private bool isLoading;
    protected override async Task OnInitializedAsync()
    {
        await GetAll(CardFileType.Customer);
    }

    private void ShowAddEditDialog(CardFilesModel model)
    {
        model.CardFileType = _cardFileType;
        _cardFilesModel = model;
        _showDialog = true;
    }
    private async Task GetAll(CardFileType cardFileType)
    {
        isLoading = true;
        var list = await _cardFilesService.GetAll((int)cardFileType);
        dataSource = list.Data.Items;
        isLoading = false;
        StateHasChanged();
    }


    private async Task OnTabSelectedChange(SelectEventArgs obj)
    {
        _cardFileType = (CardFileType)obj.SelectedIndex;
        await GetAll(_cardFileType);
    }

    private async Task OnSave()
    {
        _showDialog = false;
        await GetAll(_cardFileType);
    }

    private void OnClose()
    {
        _showDialog = false;
    }

    private async Task DeleteItem(CardFilesModel context)
    {
        bool? result = await _dialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");
        await _cardFilesService.Delete(context.Id);
        await GetAll(_cardFileType);
    }


}