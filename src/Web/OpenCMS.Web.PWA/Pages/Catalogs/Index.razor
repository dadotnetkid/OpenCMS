@page "/catalogs"

@inject ICatalogsService _catalogService
@attribute [Authorize]
<ContentWrapper CurrentPage="Catalogs">
    <div class="card">
        <div class="card-body">
            <SfGrid DataSource="dataSource" AllowPaging="true" AllowFiltering="true">
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                <GridPageSettings PageSizes="true" PageSize="10"></GridPageSettings>
                <GridColumns>
                    <GridColumn HeaderText="Manage Records" Width="150">
                        <HeaderTemplate>
                            <SfButton IsPrimary="true" IconCss="fas fa-plus-square" OnClick="@(() => ShowAddEditDialog(new CatalogModel()))"></SfButton>
                        </HeaderTemplate>
                        <Template>
                            <SfButton OnClick="@(() => ShowAddEditDialog(context as CatalogModel))" IconCss="fas fa-edit"></SfButton>
                            <SfButton OnClick="@(() => DeleteItem(context as CatalogModel))" IconCss="fas fa-trash"></SfButton>
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@nameof(CatalogModel.ItemNumber)"></GridColumn>
                    <GridColumn Field="@nameof(CatalogModel.Name)"></GridColumn>
                    <GridColumn Field="@nameof(CatalogModel.LastCost)" Format="n2"></GridColumn>
                    <GridColumn Field="@nameof(CatalogModel.SellPrice)" Format="n2"></GridColumn>
                    <GridColumn Field="@nameof(CatalogModel.Quantity)" Format="n2"></GridColumn>
                </GridColumns>
                <SfSpinner Size="40" Type="SpinnerType.Bootstrap" Visible="@isLoading"></SfSpinner>
            </SfGrid>
        </div>
    </div>
    <AddEditCatalogComponents OnDialogClose="OnDialogClose" ShowDialog="showDialog" Model="CatalogModel"></AddEditCatalogComponents>
</ContentWrapper>

@code {
    private List<CatalogModel> dataSource = new();
    private bool isLoading = true;
    private bool showDialog { get; set; }
    private CatalogModel CatalogModel { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {

        await GetAll();
    }

    private void ShowAddEditDialog(CatalogModel model)
    {

        CatalogModel = model;
        CatalogModel.BuyingDetails ??= new(){CatalogId=model?.Id};
        CatalogModel.SellingDetails ??= new(){ CatalogId = model?.Id };
        showDialog = true;
    }

    private async Task Close(object e)
    {
        showDialog = false;
        await GetAll();
    }

    private async Task GetAll()
    {
        isLoading = true;
        var list = await _catalogService.GetAll();
        dataSource = list.Data.Items;
        isLoading = false;
        StateHasChanged();
    }

    private async void OnDialogClose(bool refresh)
    {
        showDialog = false;
        if (refresh)
            await GetAll();
    }

    private async Task DeleteItem(CatalogModel context)
    {
        isLoading = true;
        await _catalogService.Delete(context.Id);
        await GetAll();
        isLoading = false;
    }

}
