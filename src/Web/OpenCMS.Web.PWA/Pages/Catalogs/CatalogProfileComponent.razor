@inject ICatalogsService _catalogService
<EditForm Model="Model" OnValidSubmit="OnValidForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <div class="row">
        <div class="col-lg-12">
            <div class="row margin-top-10">
                <div class="col-lg-4">
                    <SfTextBox CssClass="e-outline" Autocomplete="AutoComplete.Off" @bind-Value="@Model.ItemNumber" Placeholder="ItemNumber" ShowClearButton="true" FloatLabelType="FloatLabelType.Auto" />
                    <ValidationMessage For="@(() => Model.ItemNumber)" />
                </div>
                <div class="col-lg-4">
                    <SfTextBox CssClass="e-outline" Autocomplete="AutoComplete.Off" @bind-Value="@Model.ManufacturerNo" Placeholder="ManufacturerNo" ShowClearButton="true" FloatLabelType="FloatLabelType.Auto" />
                    <ValidationMessage For="@(() => Model.ManufacturerNo)" />
                </div>
                <div class="col-lg-4">
                    <SfTextBox CssClass="e-outline" Autocomplete="AutoComplete.Off" @bind-Value="@Model.SKU" Placeholder="SKU" ShowClearButton="true" FloatLabelType="FloatLabelType.Auto" />
                    <ValidationMessage For="@(() => Model.SKU)" />
                </div>
            </div>
            <div class="row margin-top-10">
                <div class="col-lg-6">
                    <SfTextBox CssClass="e-outline" Autocomplete="AutoComplete.Off" @bind-Value="@Model.Name" Placeholder="Name" ShowClearButton="true" FloatLabelType="FloatLabelType.Auto" />
                    <ValidationMessage For="@(() => Model.Name)" />
                </div>

            </div>
            <div class="row">
                <div class="col-lg-6">
                    <SfCheckBox @bind-Checked="@Model.Perishable" Label="Perishable" TChecked="bool" CssClass="margin-top-10">
                    </SfCheckBox>
                    <ValidationMessage For="@(() => Model.Perishable)" />
                </div>
            </div>
            <div class="row margin-top-10">
                <div class="col-lg-3">
                    <SfCheckBox Checked="@Model.IBuyThisItem" TChecked="bool" ValueChange="@((e)=>OnValueChange(e,nameof(CatalogModel.IBuyThisItem)))" Label="I buy this Item" CssClass="margin-top-10"></SfCheckBox>
                </div>
                <div class="col-lg-5">
                    <SfComboBox Enabled="Model.IBuyThisItem" CssClass="e-outline" TValue="string" TItem="AccountsModel" FloatLabelType="FloatLabelType.Auto" Placeholder="Select Income Account" @bind-Value="Model.IncomeAccount" DataSource="Accounts">
                        <ComboBoxFieldSettings Text="@nameof(AccountsModel.AccountName)" Value="@nameof(AccountsModel.Id)"></ComboBoxFieldSettings>
                    </SfComboBox>
                    <ValidationMessage For="@(() => Model.IncomeAccount)" />
                </div>
            </div>
            <div class="row margin-top-10">
                <div class="col-lg-3">
                    <SfCheckBox @bind-Checked="Model.IInventoryThisItem" Label="I invetory this item" CssClass="margin-top-10">

                    </SfCheckBox>
                </div>
                <div class="col-lg-5">
                    <SfComboBox Enabled="Model.IInventoryThisItem" CssClass="e-outline" TValue="string" TItem="AccountsModel" FloatLabelType="FloatLabelType.Auto" Placeholder="Select Inventory Account" @bind-Value="Model.InventoryAccount" DataSource="Accounts">
                        <ComboBoxFieldSettings Text="@nameof(AccountsModel.AccountName)" Value="@nameof(AccountsModel.Id)"></ComboBoxFieldSettings>
                    </SfComboBox>
                    <ValidationMessage For="@(() => Model.InventoryAccount)" />
                </div>
            </div>
            <div class="row margin-top-10">
                <div class="col-lg-3">
                    <SfCheckBox @bind-Checked="Model.ISellThisItem" TChecked="bool" ValueChange="@((e)=>OnValueChange(e,nameof(CatalogModel.ISellThisItem)))" Label="I sell this Item" CssClass="margin-top-10"></SfCheckBox>
                </div>
                <div class="col-lg-5">
                    <SfComboBox Enabled="Model.ISellThisItem" CssClass="e-outline" TValue="string" TItem="AccountsModel" FloatLabelType="FloatLabelType.Auto" Placeholder="Select Selling Account" @bind-Value="Model.SalesAccount" DataSource="Accounts">
                        <ComboBoxFieldSettings Text="@nameof(AccountsModel.AccountName)" Value="@nameof(AccountsModel.Id)"></ComboBoxFieldSettings>
                    </SfComboBox>
                    <ValidationMessage For="@(() => Model.SalesAccount)" />
                </div>
            </div>
        </div>

    </div>
    <div class="row" style="margin-top: 5px">
        <div class="col-lg-12">
            <SfButton type="submit" Disabled="_isLoading" IsPrimary="true">
                <SfSpinner Visible="_isLoading"></SfSpinner>
                <span class="fas fa-save"></span>
                Save
            </SfButton>
        </div>
    </div>



</EditForm>
@code{
    [Parameter] public EventCallback<bool> OnDialogClose { get; set; }
    [Parameter] public CatalogModel Model { get; set; }
    [Parameter] public List<AccountsModel> Accounts { get; set; }
    [Parameter] public EventCallback<CatalogModel> OnModelChange { get; set; }
    private bool _isLoading;
    private FluentValidationValidator _fluentValidationValidator;
    private async Task OnValidForm()
    {
        _isLoading = true;
        await CreateOrUpdate();
        await OnDialogClose.InvokeAsync(true);
        _isLoading = false;
    }
    private async Task CreateOrUpdate()
    {
        var res = new BaseResponse();
        if (Model.Id == 0)
        {
            res = await _catalogService.Create(Model);
        }
        else
        {
            res = await _catalogService.Update(Model);
        }
    }
    private void NotifyChange()
    {
        throw new NotImplementedException();
    }

    private async Task OnValueChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> obj, string propertyName)
    {
        if (propertyName == nameof(CatalogModel.IBuyThisItem))
            Model.IBuyThisItem = obj.Checked;
        if (propertyName == nameof(CatalogModel.ISellThisItem))
            Model.ISellThisItem = obj.Checked;
        await OnModelChange.InvokeAsync(Model);
    }


}