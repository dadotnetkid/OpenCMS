@using ClickEventArgs = Syncfusion.Blazor.Navigations.ClickEventArgs
<SfGrid DataSource="PermissionDataSource" AllowPaging="true" AllowFiltering="true">
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
    <GridPageSettings PageSizes="true" PageSize="10"></GridPageSettings>
    <GridEditSettings ShowConfirmDialog="true" Mode="EditMode.Normal"></GridEditSettings>
    <GridEvents TValue="PermissionsInRolesModel" OnCellSave="OnSave"></GridEvents>
    <GridColumns>
        <GridColumn HeaderText="Manage Records" Width="150">
            <HeaderTemplate>
                <SfButton IsPrimary="true" IconCss="fas fa-plus-square" OnClick="@(() => ShowAddEditDialog(new PermissionsInRolesModel()))"></SfButton>
            </HeaderTemplate>
            <Template>
                <SfButton OnClick="@(() => ShowAddEditDialog(context as PermissionsInRolesModel))" IconCss="fas fa-edit"></SfButton>
                <SfButton OnClick="@(() => ShowAddEditDialog(context as PermissionsInRolesModel))" IconCss="fas fa-trash"></SfButton>
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(PermissionsInRolesModel.Permission)" AllowEditing="false"></GridColumn>
        <GridColumn Field="@nameof(PermissionsInRolesModel.CanView)" EditType="EditType.BooleanEdit" HeaderText="View" DisplayAsCheckBox="true">

        </GridColumn>
        <GridColumn Field="@nameof(PermissionsInRolesModel.CanAdd)" EditType="EditType.BooleanEdit" HeaderText="Add" DisplayAsCheckBox="true">

        </GridColumn>
        <GridColumn Field="@nameof(PermissionsInRolesModel.CanUpdate)" EditType="EditType.BooleanEdit" HeaderText="Update" DisplayAsCheckBox="true">

        </GridColumn>
        <GridColumn Field="@nameof(PermissionsInRolesModel.CanDelete)" EditType="EditType.BooleanEdit" HeaderText="Delete" DisplayAsCheckBox="true">

        </GridColumn>

    </GridColumns>
</SfGrid>

@code{

    [Parameter] public List<PermissionsInRolesModel> PermissionDataSource { get; set; } = new();
    [Parameter] public EventCallback<PermissionsInRolesModel> OnClick { get; set; }

    private void ontoolbar(ClickEventArgs obj)
    {
        Console.WriteLine(obj.Item.Text);
        StateHasChanged();
    }


    private void OnSave(CellSaveArgs<PermissionsInRolesModel> obj)
    {
        throw new NotImplementedException();
    }

    private async Task ShowAddEditDialog(PermissionsInRolesModel model)
    {
        await OnClick.InvokeAsync(model);
    }

}